{"version":3,"sources":["Navigation/index.js","characters.js","PictureCard/index.js","Grid/index.js","shuffleArray.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","className","src","id","score","topScore","characters","PictureCard","pictureStyle","background","image","style","onClick","shufflePictures","Grid","map","character","index","name","img","shuffle","array","i","length","j","Math","floor","random","App","state","previousIDs","restart","alert","setState","console","log","incrementScore","newScore","newTopScore","includes","newScores","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb1b6195.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navigation.css\";\n\nfunction Navigation(props) {\n  return (\n\n    <div>\n      <div className=\"navbar\">\n      <div className=\"label\">\n          <img src=\"./images/logo.png\" id=\"logosize\">\n          </img>\n        </div>\n        <div className=\"label\">\n          <h2>JD's \"Batman '66\" click game!</h2>\n        </div>\n        <div className=\"label\">\n  <h2>Your score:  {props.score}</h2>\n        </div>\n        <div className=\"label\">\n          <h2>Top score:  {props.topScore} </h2>\n        </div>\n        <div className=\"babel\">\n          <h2><center>Click all 12 characters without repeating yourself!</center></h2>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default Navigation;","const characters = [\n    {\n      \"id\": 1,\n      \"img\": \"./images/batusi.jpg\",\n      \"name\": \"Adam West as Batman\"\n    },\n  \n    {\n      \"id\": 2,\n      \"img\":\"./images/robin.jpg\" ,\n      \"name\": \"Burt Ward as Robin\"\n    },\n    {\n      \"id\": 3,\n      \"img\": \"./images/catwomankitt.jpg\",\n      \"name\": \"Eartha Kitt as Catwoman\"\n    },\n    {\n      \"id\": 4,\n      \"img\": \"./images/joker.jpg\",\n      \"name\": \"Cesar Romero as Joker\"\n    },\n    {\n      \"id\": 5,\n      \"img\": \"./images/penguin.jpg\",\n      \"name\": \"Burgess Meredith as Penguin\"\n    },\n    {\n      \"id\": 6,\n      \"img\": \"./images/riddler.jpg\",\n      \"name\": \"Frank Gorshin as Riddler\"\n    },\n    {\n      \"id\": 7,\n      \"img\": \"./images/batgirl.jpg\",\n      \"name\": \"Batgirl\"\n    },\n    {\n      \"id\": 8,\n      \"img\": \"./images/batmobile.jpg\",\n      \"name\": \"Batmobile\"\n    },\n    {\n      \"id\": 9,\n      \"img\": \"./images/kapow.jpg\",\n      \"name\": \"Kapow!\"\n    },\n    {\n      \"id\": 10,\n      \"img\": \"./images/egghead.jpg\",\n      \"name\": \"Egghead\"\n    },\n    {\n      \"id\": 11,\n      \"img\": \"./images/kingtut.jpg\",\n      \"name\": \"King Tut\"\n    },\n    {\n        \"id\": 12,\n        \"img\": \"./images/catwomannewmar.jpg\",\n        \"name\": \"Julie Newmar as Catwoman\"\n      }\n  ]\n\n  export default characters;","import React from \"react\";\nimport \"./style.css\";\n\nfunction PictureCard(props) {\n  \n  const pictureStyle = {\n    background: `center / contain no-repeat url(${props.image})`\n  }\n\n  return (\n    <div style={pictureStyle} onClick ={() => props.shufflePictures(props.id)} className=\"col-3 card\"></div>\n  );\n}\n\nexport default PictureCard;\n","import React from \"react\";\nimport \"./Grid.css\";\nimport characters from \"../characters.js\"\nimport PictureCard from \"../PictureCard\"\n\n// import {Row} from \"react-bootstrap\"\n\nfunction Grid(props) {\n    return (\n        <div>\n            <div className=\"row\">\n                    {characters.map((character, index) => {\n                return (\n                    <PictureCard className=\"col-md-3\"\n                    shufflePictures={props.shufflePictures}\n                    id={character.id}\n                    name={character.name}\n                    image={character.img}\n                  />\n                )})}\n            </div>\n        </div >\n    );\n}\n\nexport default Grid;","\n\nexport const shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1)); \n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n};\n\n\n// random index from 0 to i\n\n        // swap elements array[i] and array[j]\n        // we use \"destructuring assignment\" syntax to achieve that\n        // you'll find more details about that syntax in later chapters\n        // same can be written as:\n        // let t = array[i]; array[i] = array[j]; array[j] = t","import React, { Component } from 'react';\nimport Navigation from \"./Navigation\";\nimport Grid from \"./Grid\"\nimport characters from \"./characters.js\"\nimport './App.css';\nimport { shuffle } from './shuffleArray';\nimport PictureCard from \"./PictureCard\";\n\n//  Individual component for ; \n\nclass App extends Component {\n  // Setting this.state.pictures to the pictures json array\n  \n  state = {\n    characters,\n    previousIDs: [0],\n    score: 0,\n    topScore: 0,\n  };\n\n  \n  restart = () => {\n    alert(\"game over\");\n    this.setState({\n        characters,\n      previousIDs: [0],\n      score: 0,\n      topScore: this.state.topScore,\n    })\n    \n    console.log(\"this.state endgame\", this.state)\n  }\n  \n  incrementScore = () => {\n    \n    let newScore = this.state.score + 1;\n\n    const newTopScore = newScore > this.state.topScore ? newScore : this.state.topScore;\n\n    if (newScore > 8) {\n      alert(\"congrats you won.\");\n      this.restart();\n    }\n\n    return {\n      newScore,\n      newTopScore\n    }\n  }\n\n  shufflePictures = (id) => {\n    const characters = shuffle(this.state.characters);\n\n    if(!this.state.previousIDs.includes(id)) {\n\n      const newScores = this.incrementScore();\n      \n      this.setState({ characters, previousIDs: [...this.state.previousIDs, id], score:newScores.newScore, topScore:newScores.newTopScore });\n    } \n    else {\n      return this.restart()\n    };\n  };\n\n  render() {\n    return (\n      <>\n      <Navigation score={this.state.score} topScore={this.state.topScore} />\n      <div className=\"container\">\n      <Grid shufflePictures={this.shufflePictures}\n      />\n      </div>\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}